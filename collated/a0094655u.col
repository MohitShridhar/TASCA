//@author: a0094655u



	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java
	 */

	public static void initStorage(AllTasks alltasks) {
		_storage = alltasks;

		return;
	}

	public static void initSystemMessage(CurrentSystemState sysMsg) {
		systemMessage = sysMsg;
	}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java
	 */

	public static AllTasks getStorage() {
		return _storage;
	}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java
	 */

	public static boolean addTask(int folder, int priority, Date start,
			Date end, boolean isThereReminder, boolean isTaskDone,
			boolean isAllDayEvent, String title, String location, Date reminder) {

		boolean isTaskAdded = false;

		Calendar taskStart = Calendar.getInstance();
		taskStart.setTime(start);

		Calendar taskEnd = Calendar.getInstance();
		taskEnd.setTime(end);

		Date current = new Date();

		boolean isValidDuration = start.before(end);
		boolean isEventNotEnded = current.before(end);

		if (isValidDuration && isEventNotEnded) {
			int TaskId = 0;
			int totalNumOfTasks = _storage.getTaskSize();
			int count = 0;
			// taskStart may have a larger time then the i task,
			// thus, increment the i task till taskStart smaller.
			boolean IsTaskNotInCorrectPosition = true;
			while ((count < totalNumOfTasks) && (IsTaskNotInCorrectPosition)) {

				IsTaskNotInCorrectPosition = taskStart.compareTo(_storage
						.getTask(count).getStartTime()) > 0;
				count++;
			}

			if (count != 0) {
				// correct position
				count--;
			}
			if (count == totalNumOfTasks - 1) {
				count++;
			}

			Task task = new Task(folder, TaskId, priority, taskStart, taskEnd,
					isThereReminder, isTaskDone, isAllDayEvent, title, location);

			isTaskAdded = _storage.addTask(count, task);

			TaskWithReminder taskReminder = null;

			if (task.getIsThereReminder()) {

				Calendar reminderTime = Calendar.getInstance();
				reminderTime.setTime(reminder);

				taskReminder = new TaskWithReminder(reminderTime, task);

				count = 0;

				boolean IsReminderNotInCorrectPosition = true;
				int totalNumOfReminders = _storage.getReminderSize();

				while ((count < totalNumOfReminders)
						&& (IsReminderNotInCorrectPosition)) {
					IsReminderNotInCorrectPosition = reminderTime
							.compareTo(_storage.getReminder(count)
									.getReminderTime()) > 0;
					count++;
				}
				if (count != 0) { // correct position
					count--;
				}

				_storage.addReminder(count, taskReminder);
			}

		}
		return isTaskAdded;
	}

	public static boolean deleteTask(int index) {
		boolean isTaskDeleted = false;
		int totalNumOfTasks = _storage.getSize();
		if (index < totalNumOfTasks && index >= 0) {
			if (index < _storage.getTaskSize()) {

				if (_storage.getTask(index).getIsThereReminder()) {
					_storage.deleteReminder(_storage.getTask(index));
				}
				isTaskDeleted = _storage.deleteTask(index);
			} else {
				isTaskDeleted = _storage.deleteFloatingTask(index);
			}
			System.out.printf("%s\n", MESSAGE_TASK_DELETED);

		} else {
			systemMessage.setSystemMessage(MESSAGE_TASK_NOT_DELETED);
		}
		return isTaskDeleted;
	}

	public static void displayTask(int index,
			LinkedList<TaskWithReminder> list, LinkedList<FloatingTask> list2) {

		int totalNumOfTasks = _storage.getSize();
		if (index < _storage.getTaskSize()) {

			if (index < totalNumOfTasks) {
				Task task = _storage.getTask(index);
				list.add(new TaskWithReminder(null, task));
				int indexOfReminder = _storage
						.searchForCorrespondingReminder(task);

				SimpleDateFormat display = new SimpleDateFormat(
						"E yyyy.MM.dd 'at' hh:mm:ss a zzz");
				System.out.println("Folder: " + task.getFolder());
				System.out.println("id: " + task.getTaskID());
				System.out.println("priority: " + task.getPriority());
				System.out.println("start: "
						+ display.format(task.getStartTime().getTime()));
				System.out.println("end: "
						+ display.format(task.getEndTime().getTime()));
				System.out.println("title: " + task.getTaskTitle());
				try {
					System.out.println("location: " + task.getLocation());
				} catch (Exception e1) {
					System.out.println("location: NIL");
				}
				try {
					System.out.println("reminder: "
							+ display.format(_storage
									.getReminder(indexOfReminder)
									.getReminderTime().getTime()));
					list.getLast().setReminderTime(
							_storage.getReminder(indexOfReminder)
									.getReminderTime());
				} catch (Exception e2) {
					System.out.println("reminder: NIL");
				}
				System.out.printf("Is Task Done: ");
				System.out.println((task.getIsTaskDone()) ? "YES" : "NO");
				System.out.printf("Is All Day Event: ");
				System.out.println((task.getIsAllDayEvent()) ? "YES" : "NO");
				System.out
						.println("************************************************************************");
			}
		} else {
			if (index >= _storage.getTaskSize()) {

				FloatingTask node = _storage.getFloatingTask(index);
				list2.add(node);

				System.out.println("Folder: " + node.getFolder());
				System.out.println("id: " + node.getTaskID());
				System.out.println("priority: " + node.getPriority());
				System.out.println("title: " + node.getTaskTitle());
				try {
					System.out.println("location: " + node.getLocation());
				} catch (Exception e1) {
					System.out.println("location: NIL");
				}
				System.out.printf("Is Task Done: ");
				System.out.println((node.getIsTaskDone()) ? "YES" : "NO");
				System.out
						.println("=========================================================================");
			} else {
				systemMessage.setSystemMessage(MESSAGE_TASK_INDEX_INVALID);
			}
		}
	}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java
	 */

	public static void displayAllTasks() {
		int totalNumOfTasks = _storage.getSize();
		LinkedList<TaskWithReminder> list = new LinkedList<TaskWithReminder>();
		LinkedList<FloatingTask> list2 = new LinkedList<FloatingTask>();
		for (int count = 0; count < totalNumOfTasks; count++) {
			displayTask(count, list, list2);
		}
		systemMessage.setTimedList(list);
		systemMessage.setFloatingList(_storage.getFloatingList());
	}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java
	 */

	public static void displayTasksAtPeriod(Date startDateSpecified,
			Date endDateSpecified) {
		int totalNumOfTasks = _storage.getTaskSize();
		LinkedList<TaskWithReminder> list = new LinkedList<TaskWithReminder>();
		LinkedList<FloatingTask> list2 = new LinkedList<FloatingTask>();

		Date startTime, endTime;
		for (int count = 0; count < totalNumOfTasks; count++) {
			Task task = _storage.getTask(count);

			// convert 'Calendar' to 'Date' to compare
			startTime = task.getStartTime().getTime();
			endTime = task.getEndTime().getTime();

			boolean hasTaskStarted = startTime.before(endDateSpecified)
					&& endTime.after(startDateSpecified);
			boolean hasTaskNotEnded = startTime.before(startDateSpecified)
					&& endTime.after(startDateSpecified);

			if (hasTaskStarted || hasTaskNotEnded) {
				displayTask(count, list, list2);
			}
		}
		systemMessage.setTimedList(list);
		systemMessage.setFloatingList(list2);
	}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java
	 */

	public static void displayTasksAtDate(Date dateSpecified) {
		Calendar endDate = Calendar.getInstance();
		endDate.setTime(dateSpecified);
		endDate.set(Calendar.HOUR_OF_DAY, 23);
		endDate.set(Calendar.MINUTE, 59);
		displayTasksAtPeriod(dateSpecified, endDate.getTime());
	}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java
	 */

	public static int searchTask(String searchString) {
		int totalNumOfTasks = _storage.getSize(), count = 0;
		LinkedList<TaskWithReminder> list = new LinkedList<TaskWithReminder>();
		LinkedList<FloatingTask> list2 = new LinkedList<FloatingTask>();
		for (int index = 0; index < totalNumOfTasks; index++) {
			String taskTitle;
			if (index < _storage.getTaskSize()) {
				taskTitle = _storage.getTask(index).getTaskTitle();
				if (isInString(taskTitle, searchString)) {
					count++;
					displayTask(index, list, list2);
				}
			} else {
				taskTitle = _storage.getFloatingTask(index).getTaskTitle();
				if (isInString(taskTitle, searchString)) {
					count++;
					displayTask(index, list, list2);
				}
			}
		}
		systemMessage.setTimedList(list);
		systemMessage.setFloatingList(list2);
		// systemMessage.setSystemMessage(MESSAGE_TASK_FOUND.format(count,searchString));
		return count;
	}

	public static void deleteAlldone() {
		int totalNumOfTasks = _storage.getSize();
		int index = 0;
		int count = 0;
		while (index < totalNumOfTasks) {
			if (index < _storage.getTaskSize()) {
				if (_storage.getTask(index).getIsTaskDone()) {
					deleteTask(index);
					totalNumOfTasks--;
					count++;
				} else {
					index++;
				}
			} else {
				if (_storage.getFloatingTask(index).getIsTaskDone()) {
					deleteTask(index);
					totalNumOfTasks--;
					count++;
				} else {
					index++;
				}

			}

		}
		System.out.printf("%d Tasks have been done and deleted", count);
	}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java
	 */

	public static String getUserInput(Scanner input) {
		// Scanner input = new Scanner(System.in);
		String result = input.nextLine();
		return result;
	}

	public static void deleteSearch(String searchString, Scanner sc) {
		searchTask(searchString);

		String getResponse = getUserInput(sc);
		// System.out.printf("%s", s);
		if (getResponse.equals("Y")) {
			int totalNumOfTasks = _storage.getSize();
			for (int index = 0; index < totalNumOfTasks; index++) {
				String taskTitle;
				if (index < _storage.getTaskSize()) {
					taskTitle = _storage.getTask(index).getTaskTitle();
				} else {
					taskTitle = _storage.getFloatingTask(index).getTaskTitle();
				}
				if (isInString(taskTitle, searchString)) {
					deleteTask(index);
					totalNumOfTasks--;
				}
			}
			System.out.printf("All search results deleted.");
		}
	}

	/**
	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java
	 */

	public static void displayToday() {
		Calendar today = Calendar.getInstance();
		today.set(Calendar.HOUR_OF_DAY, 0);
		today.set(Calendar.MINUTE, 0);
		displayTasksAtDate(today.getTime());
	}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java
	 */

	public static void displayTomorrow() {
		// long tomorrowInMillis = System.currentTimeMillis()
		// + CONSTANT_MILLISECONDS_IN_A_DAY;

		Calendar tomorrow = Calendar.getInstance();
		tomorrow.set(tomorrow.get(Calendar.YEAR), tomorrow.get(Calendar.MONTH),
				tomorrow.get(Calendar.DATE) + 1, 0, 0);
		// Date tomorrow = new Date(tomorrowInMillis);
		displayTasksAtDate(tomorrow.getTime());
	}

	public static boolean taskIsDone(int index) {
		int totalNumOfTasks = _storage.getSize();
		if (index < totalNumOfTasks && index >= 0) {
			if (index < _storage.getTaskSize() && index >= 0) {
				_storage.getTask(index).setIsTaskDone(true);
			} else {
				_storage.getFloatingTask(index).setIsTaskDone(true);
			}
			return true;
		} else {
			systemMessage.setSystemMessage(MESSAGE_TASK_INDEX_INVALID);
			return false;
		}

	}

	public static boolean taskIsNotDone(int index) {
		int totalNumOfTasks = _storage.getSize();
		if (index < totalNumOfTasks && index >= 0) {
			if (index < _storage.getTaskSize() && index >= 0) {
				_storage.getTask(index).setIsTaskDone(false);
			} else {
				_storage.getFloatingTask(index).setIsTaskDone(false);
			}
			return true;
		} else {
			systemMessage.setSystemMessage(MESSAGE_TASK_INDEX_INVALID);
			return false;
		}
	}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java
	 */

	private static boolean isInString(String mainString, String subString) {
		if (subString.trim().length() == 0) {
			return false;
		}
		return (mainString.toLowerCase().contains(subString.toLowerCase()));
	}
}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\Logic.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\LogicTestAdd.java
	 */

public class LogicTestAdd {

	//testing for add function
	
	@Test
	//checks if both start time == end time.
	public void testAddTask() {
		
		Logic.initStorage(new AllTasks());
		
		Date current = new Date();
		Date start = current;
		Date end = current;
		
		boolean result = Logic.addTask(0, 0, start, end, false, false, false, "Test logic add function", "COM1", current);
		assertFalse(result);
	}
	
	@Test
	//if end time is later then start time is true.
	public void test2AddTask() {
		
		Logic.initStorage(new AllTasks());
		
		Date current = new Date();
		Date start = current;
		Date end = new Date(current.getTime() + 60000L);
		
		boolean result = Logic.addTask(0, 0, start, end, false, false, false, "Test logic add function", "COM1", current);
		assertTrue(result);
	}
    @Test
    //the event has ended already, false.
	public void test3AddTask() {
		
		Logic.initStorage(new AllTasks());
		
		Date current = new Date();
		Date start = new Date(current.getTime() - 120000L);
		Date end = new Date(current.getTime() - 60000L);
		boolean result = Logic.addTask(0, 0, start, end, false, false, false, "Test logic add function", "COM1", current);
		assertFalse(result);
	}
	
    @Test
    //end time is earlier than start time.
	public void test4AddTask() {
		
		Logic.initStorage(new AllTasks());
		
		Date current = new Date();
		Date start = new Date(current.getTime() + 120000L);
		Date end = new Date(current.getTime() + 60000L);
		//invalid duration start > end
		boolean result = Logic.addTask(0, 0, start, end, false, false, false, "Test logic add function", "COM1", current);
		assertFalse(result);
	}

}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\LogicTestAdd.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\LogicTestClear.java
	 */

public class LogicTestClear {

	@Test
	//checks if folder is cleared when added new tasks to a certain folder.
	public void testClearTask() {
		AllTasks storage = new AllTasks();
		Logic.initStorage(storage);
		
		Date current = new Date();
		Date start = current;
		Date end = new Date(current.getTime() + 60000L);
		
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add function", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add2 function", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add3 function", "COM1", current);

		assertTrue(Logic.getStorage().getSize() == 3);
		Logic.clearFolder(0);
		assertTrue(Logic.getStorage().getSize() == 0);		
	}
	
	@Test
	//checks if folder is cleared base on other tasks added.
	public void test2ClearTask() {
		AllTasks storage = new AllTasks();
		Logic.initStorage(storage);
		
		Date current = new Date();
		Date start = current;
		Date end = new Date(current.getTime() + 60000L);
		
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add function", "COM1", current);
		Logic.addTask(1, 0, start, end, false, false, false, "Test logic add2 function", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add3 function", "COM1", current);

		assertTrue(Logic.getStorage().getSize() == 3);
		Logic.clearFolder(0);
		assertTrue(Logic.getStorage().getSize() == 1);		
	}

}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\LogicTestClear.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\LogicTestDelete.java
	 */

public class LogicTestDelete {

	@Test
	//delete last task
	public void testDeleteTask() {
		Logic.initStorage(new AllTasks());
		
		Date current = new Date();
		Date start = current;
		Date end = new Date(current.getTime() + 60000L);
		
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add function", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add2 function", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add3 function", "COM1", current);
		
		boolean result = Logic.deleteTask(2);
		assertTrue(result);
	}

	@Test
	//delete first task, index = 0
	public void testDelete2Task() {
		Logic.initStorage(new AllTasks());
		
		Date current = new Date();
		Date start = current;
		Date end = new Date(current.getTime() + 60000L);
		
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add function", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add2 function", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add3 function", "COM1", current);
		
		boolean result = Logic.deleteTask(0);
		assertTrue(result);
	}
	
	@Test
	//deleting invalid task out of range
	public void testDelete3Task() {
		Logic.initStorage(new AllTasks());
		
		Date current = new Date();
		Date start = current;
		Date end = new Date(current.getTime() + 60000L);
		
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add function", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add2 function", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add3 function", "COM1", current);
		
		boolean result = Logic.deleteTask(5);
		assertFalse(result);
	}
	
	@Test
	//deleting a negative task number
	public void testDelete4Task() {
		Logic.initStorage(new AllTasks());
		
		Date current = new Date();
		Date start = current;
		Date end = new Date(current.getTime() + 60000L);
		
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add function", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add2 function", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add3 function", "COM1", current);
		
		boolean result = Logic.deleteTask(-1);
		assertFalse(result);
	}
	
}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\LogicTestDelete.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\LogicTestDeleteSearch.java
	 */

public class LogicTestDeleteSearch {

	@Test
	//deleting all task related that is a substring.
	public void testDeleteSearch() {
		
		AllTasks storage = new AllTasks();
		
		Logic.initStorage(storage);
		
		Date current = new Date();
		Date start = current;
		Date end = new Date(current.getTime() + 60000L);
		
		Logic.addTask(0, 0, start, end, false, false, false, "pineapple", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "watermelon", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "green apple", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "papaya", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "honeydew", "COM1", current);

		assertTrue(storage.getTaskSize() == 5);
		
		Scanner userInput = new Scanner("Y");
		
		Logic.deleteSearch("apple", userInput);
		
		assertTrue(storage.getTaskSize() == 3);
		
	}

	@Test
	//test if negative usercommmand is issued, task is not deleted.
	public void testDeleteSearch2() {
		
		AllTasks storage = new AllTasks();
		
		Logic.initStorage(storage);
		
		Date current = new Date();
		Date start = current;
		Date end = new Date(current.getTime() + 60000L);
		
		Logic.addTask(0, 0, start, end, false, false, false, "pineapple", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "watermelon", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "green apple", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "papaya", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "honeydew", "COM1", current);

		assertTrue(storage.getTaskSize() == 5);
		
		Scanner userInput = new Scanner("N");
		
		Logic.deleteSearch("apple", userInput);
		
		assertTrue(storage.getTaskSize() == 5);
		
	}
	
}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\LogicTestDeleteSearch.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\LogicTestSearch.java
	 */

public class LogicTestSearch {

	//testing for search function
	
	@Test
	//test if search obtains the correct number of matches when finding substring.
	public void testSearchTask() {
		
		
		AllTasks storage = new AllTasks();
		
		Logic.initStorage(storage);
		
		Date current = new Date();
		Date start = current;
		Date end = new Date(current.getTime() + 60000L);
		//should search also search tasks based on location?
		Logic.addTask(0, 0, start, end, false, false, false, "pineapple", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "watermelon", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "green apple", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "papaya", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "honeydew", "COM1", current);

		assertTrue(storage.getTaskSize() == 5);
		
		int numOfSearches = Logic.searchTask("apple");
		assertTrue(numOfSearches == 2);
		
	}
	@Test
	//no match found when substring is not inside any tasks.
	public void testSearch2Task() {
				
		AllTasks storage = new AllTasks();
		
		Logic.initStorage(storage);
		
		Date current = new Date();
		Date start = current;
		Date end = new Date(current.getTime() + 60000L);
		
		Logic.addTask(0, 0, start, end, false, false, false, "pineapple", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "watermelon", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "green apple", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "papaya", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "honeydew", "COM1", current);

		assertTrue(storage.getTaskSize() == 5);
		
		int numOfSearches = Logic.searchTask("orange");
		assertTrue(numOfSearches == 0);
		
	}

	@Test
	//when searching for a white space, search should not display any.
	public void testSearch3Task() {
		
		AllTasks storage = new AllTasks();
		
		Logic.initStorage(storage);
		
		Date current = new Date();
		Date start = current;
		Date end = new Date(current.getTime() + 60000L);
		
		Logic.addTask(0, 0, start, end, false, false, false, "pineapple", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "watermelon", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "green apple", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "papaya", "COM1", current);
		Logic.addTask(0, 0, start, end, false, false, false, "honeydew", "COM1", current);

		assertTrue(storage.getTaskSize() == 5);
		//should not display any search if is a space.
		int numOfSearches = Logic.searchTask(" ");
		assertTrue(numOfSearches == 0);
		
	}
	
}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\LogicTestSearch.java





	/**
	 * origin: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\LogicTestUpdate.java
	 */

public class LogicTestUpdate {

	@Test
	//test if update is implemented correctly start time < end time.
	public void testUpdateTask() {
		Logic.initStorage(new AllTasks());
		
		Date current = new Date();
		Date start = current;
		Date end = new Date(current.getTime() + 60000L);
		
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add function", "COM1", current);

		start.setTime(current.getTime() + 60000L);
		end.setTime(current.getTime() + 120000L);
		
		Calendar startDate = Calendar.getInstance();
		startDate.setTime(start);
		Calendar endDate = Calendar.getInstance();
		endDate.setTime(end);
		
		boolean result;
		
		result = Logic.updateTask(0, "0", "1", startDate, endDate, false, "Test logic modify function", "ICUBE", current);
				
		assertTrue(result);
	}
	
	@Test
	//test if update is implemented correctly end time < stars time yields in correct result.
	public void test2UpdateTask() {
		Logic.initStorage(new AllTasks());
		
		Date current = new Date();
		Date start = current;
		Date end = new Date(current.getTime() + 60000L);
		
		Logic.addTask(0, 0, start, end, false, false, false, "Test logic add function", "COM1", current);

		start.setTime(current.getTime() + 60000L);
		end.setTime(current.getTime() + 120000L);
		
		Calendar startDate = Calendar.getInstance();
		startDate.setTime(start);
		Calendar endDate = Calendar.getInstance();
		endDate.setTime(end);
		
		boolean result;
		
		result = Logic.updateTask(0, "0", "1", endDate, startDate, false, "Test logic modify function", "ICUBE", current);
				
		assertFalse(result);
	}

}

	// End of segment: Z:\Desktop\NUS\SEM4\CS1231\TASCA\Tasca\src\logic\LogicTestUpdate.java





